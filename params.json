{"name":"Smooth Interfacing with Buttons","tagline":"A tutorial about building a debounced push button array","body":"### Welcome to Lab 2!\r\nThis write-up describes the steps and knowledge necessary to build an interface from a push button array to a FIFO. It assumes the reader has completed the Lab 1 Tutorial, Xillibus on Zedboard and is familiar with the Vivado toolset from Xilinx. \r\n\r\nIn Lab 2 we will write HDL using the Verilog language to develop an input only interface. The lab starts by understanding the wiring of the push button. Next Vivado is used to write and simulate a Verilog module for a single push button. The signal input into the FPGA fabric from the push button is studied using the Vivado debug module, and the Verilog is extended to implement hardware debouncing of the push button. Finally we multiplex 9 push buttons together and create an interface to a keyboard consisting of 9 push buttons.\r\n\r\n### 1. Get Started: Wire a Push Button\r\n- Wire a push button and verify using a multimeter. Use a 1K Resistor.\r\n\r\n### 2. Write Verilog\r\n- Using Vivado, write a short Verilog module. It should have an input named button (**btn**) and an output named led(**led**). Include a clock (**clk**) as input as well. Name every variable with 3 Characters. (haha...) \r\n- When the button is 0 the led is off.\r\n- When the button is 1 the led is on.\r\n- Write a test bench and simulate the Verilog. \r\nQuestion: What sort of simulation signal should you use for your input?\r\n(Maybe draw a figure here.)\r\n\r\nHere is the Verilog I used for my first run.\r\n```\r\nmodule button(input btn, input clk, input rst, output led);\r\n\r\nalways @ (posedge clk)\r\nbegin\r\n    if (rst == 1'b0) // reset when rst is 0\r\n        begin\r\n            led <= 1'b0; // LED is off when reset is low\r\n        end\r\n    else\r\n        begin\r\n        if (btn == 1'b1)\r\n            begin\r\n                led <= 1'b1;\r\n            else\r\n                led <= 1'b0;\r\n            end\r\n    end\r\nend\r\n\r\nendmodule\r\n```\r\nThe test bench code looks like this:\r\n```\r\nmodule tb( );\r\n  reg clk, reset, enable, btnPress;\r\n  wire led;\r\n  button u1 ( \r\n  .btn( btnPress ),\r\n  .clk( clk ), \r\n  .rst( reset ),\r\n  .led( led )\r\n  ); \r\n    \r\n  initial \r\n  begin \r\n    clk = 0; \r\n    reset = 0; \r\n    btnPress = 0;\r\n    enable = 1;\r\n    #1 reset = 1; // #1 means delay one cycle. (#5 means delay 5 cycles...)\r\n  end \r\n    \r\n  always \r\n    #5 clk = !clk; \r\n    \r\n  always \r\n    #50 btnPress = !btnPress;\r\n\r\nendmodule \r\n````\r\n\r\n### 3. Record Debug Signals\r\nThe signal input into the FPGA fabric from the push button is studied using the Vivado debug module\r\n\r\n### 4. Hardware Debounce Push Button\r\nWrite some more code...\r\nRecord debug....\r\nTest Debounce with single push button\r\n\r\n### 5. Assemble 9 Push Buttons\r\nHow many signal wires are needed for 9 push buttons?\r\n\r\n### 6. Write Verilog for Multiplexing\r\n\r\n### 7. Interrupts or interface to Xillibus /dev/ tree or to FIFO\r\n\r\n### 8. Happy and Complete working Verilog push button keyboard\r\n\r\n### Authors and Contributors\r\nBy @kariefury","google":"UA-47389602-4","note":"Don't delete this file! It's used internally to help with page regeneration."}